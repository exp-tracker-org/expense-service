name: CI - Expense Service

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  lint-test-scan:
    name: Lint, Test, SAST & SCA
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.get_sha.outputs.sha }}
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"

      # Step 3: Cache Go modules and Go build cache for faster runs
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Step 4: Install linting, SAST & SCA tools, and download dependencies
      - name: Install tools & download dependencies
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          go install golang.org/x/vuln/cmd/govulncheck@latest
          go mod tidy

      # Step 5: Get the commit SHA for tagging Docker images
      - name: Get commit SHA
        id: get_sha
        run: echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      # Step 6: Run Go linter
      - name: Run Lint
        run: golangci-lint run ./... || echo "Lint warnings present"

      # Step 7: Run unit tests and generate JSON report
      - name: Run Unit Tests
        run: |
          mkdir -p reports
          go test ./... -v -json > reports/test-results.json

      # Step 8: Run SAST (gosec)
      - name: Run SAST (gosec)
        run: gosec ./...

      # Step 9: Run SCA (govulncheck)
      - name: Run SCA (govulncheck)
        run: govulncheck ./...

      # Step 10: Upload all reports as artifacts
      - name: Upload reports
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: reports/

  build-and-deploy:
    name: Build & Deploy Docker Image
    needs: lint-test-scan
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3: Build Docker image and push SHA + latest tags
      - name: Build & Push Docker Image
        run: |
          IMAGE=minnuantony/expense-service
          SHA_TAG=$IMAGE:sha-${{ needs.lint-test-scan.outputs.sha }}
          LATEST_TAG=$IMAGE:latest
          docker build -t $SHA_TAG -t $LATEST_TAG .
          docker push $SHA_TAG
          docker push $LATEST_TAG

      # Step 4: Update Kubernetes deployment manifest with new image
      - name: Update Deployment Manifest
        run: |
          sed -i "s|image: .*|image: minnuantony/expense-service:sha-${{ needs.lint-test-scan.outputs.sha }}|" ./k8s/deployment.yaml
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add ./k8s/deployment.yaml
          git commit -m "Update expense-service image to sha-${{ needs.lint-test-scan.outputs.sha }}" || echo "No changes to commit"
          git push
